{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","defaultFieldResolver","assertValidName","parse","GraphQLNonNull","GraphQLList","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","ScalarTypeComposer","EnumTypeComposer","apiRunner","report","addNodeInterfaceFields","addInferredType","addInferredTypes","findOne","findManyPaginated","processFieldExtensions","internalExtensionNames","getPagination","getSortInput","getFilterInput","isGatsbyType","GatsbyGraphQLTypeKind","buildSchema","schemaComposer","nodeStore","types","typeMapping","fieldExtensions","thirdPartySchemas","typeConflictReporter","parentSpan","updateSchemaComposer","schema","rebuildSchemaWithSitePage","typeComposer","getOTC","processTypeComposer","module","exports","addTypes","addSetFieldsOnGraphQLNodeTypeFields","Promise","all","Array","from","Set","values","map","checkQueryableInterfaces","addThirdPartySchemas","addCustomResolveFunctions","hasInterface","addConvenienceChildrenFields","addTypeToRootQuery","getExtension","forEach","typeOrTypeDef","plugin","parsedTypes","createdFrom","parseTypeDefs","typeDefs","error","reportParsingError","type","processAddedType","createTypeComposerFromGatsbyType","typeName","getTypeName","checkIsAllowedTypeName","has","get","mergeTypes","name","typeOwner","merge","isNamedTypeComposer","extendExtensions","getExtensions","addExtensions","warn","addAsComposer","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","setExtension","directives","getDirectives","args","noDefaultResolvers","hasField","getFieldType","toString","panic","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","getFieldExtensions","Object","keys","filter","includes","definition","getDirective","defaultValue","undefined","arg","argumentDef","find","value","validate","message","hasExtension","endsWith","kind","OBJECT","createTemp","config","interfaces","iface","getIFTC","getType","INPUT_OBJECT","UNION","INTERFACE","ENUM","SCALAR","JSON","stringify","tc","result","nodes","getNodesByType","traceId","fields","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getFields","getTypeMap","createTC","field","getField","fieldType","replace","extendField","intermediateSchema","createResolvers","resolvers","fieldConfig","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","isArray","stringifyArray","newConfig","source","context","info","childNodesByType","groupChildNodesByType","typeChildren","maxChildCount","maxBy","groupBy","c","parent","g","length","createChildrenField","createChildField","camelCase","path","nodeModel","getNodesByIds","ids","children","flatMap","getNode","removeInputTypeComposer","sortInputTC","filterInputTC","paginationTC","queryName","queryNamePlural","sort","skip","limit","parseTypes","doc","definitions","def","parsedType","typeMapper","makeSchemaDef","set","push","locations","codeFrameColumns","frame","body","start","linesAbove","linesBelow","arr","item","Error","ofType","v","parseValue","queryableInterfaces","add","incorrectTypes","getInterfaces","some","t","join"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  defaultFieldResolver,\n  assertValidName,\n  parse,\n  GraphQLNonNull,\n  GraphQLList,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n  ScalarTypeComposer,\n  EnumTypeComposer,\n} = require(`graphql-compose`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { addInferredType, addInferredTypes } = require(`./infer`)\nconst { findOne, findManyPaginated } = require(`./resolvers`)\nconst {\n  processFieldExtensions,\n  internalExtensionNames,\n} = require(`./extensions`)\nconst { getPagination } = require(`./types/pagination`)\nconst { getSortInput } = require(`./types/sort`)\nconst { getFilterInput } = require(`./types/filter`)\nconst { isGatsbyType, GatsbyGraphQLTypeKind } = require(`./types/type-builders`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await updateSchemaComposer({\n    schemaComposer,\n    nodeStore,\n    types,\n    typeMapping,\n    fieldExtensions,\n    thirdPartySchemas,\n    typeConflictReporter,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  // console.log(printSchema(schema))\n  return schema\n}\n\nconst rebuildSchemaWithSitePage = async ({\n  schemaComposer,\n  nodeStore,\n  typeMapping,\n  fieldExtensions,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  const typeComposer = addInferredType({\n    schemaComposer,\n    typeComposer: schemaComposer.getOTC(`SitePage`),\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await processTypeComposer({\n    schemaComposer,\n    typeComposer,\n    fieldExtensions,\n    nodeStore,\n    parentSpan,\n  })\n  return schemaComposer.buildSchema()\n}\n\nmodule.exports = {\n  buildSchema,\n  rebuildSchemaWithSitePage,\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  nodeStore,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  typeConflictReporter,\n  parentSpan,\n}) => {\n  await addTypes({ schemaComposer, parentSpan, types })\n  await addInferredTypes({\n    schemaComposer,\n    nodeStore,\n    typeConflictReporter,\n    typeMapping,\n    parentSpan,\n  })\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    nodeStore,\n    parentSpan,\n  })\n  await Promise.all(\n    Array.from(new Set(schemaComposer.values())).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        nodeStore,\n        parentSpan,\n      })\n    )\n  )\n  checkQueryableInterfaces({ schemaComposer })\n  await addThirdPartySchemas({ schemaComposer, thirdPartySchemas, parentSpan })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan })\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  fieldExtensions,\n  nodeStore,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({\n      schemaComposer,\n      typeComposer,\n      fieldExtensions,\n      parentSpan,\n    })\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n      await addConvenienceChildrenFields({\n        schemaComposer,\n        typeComposer,\n        nodeStore,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  } else if (typeComposer instanceof InterfaceTypeComposer) {\n    if (typeComposer.getExtension(`nodeInterface`)) {\n      // We only process field extensions for queryable Node interfaces, so we get\n      // the input args on the root query type, e.g. `formatString` etc. for `dateformat`\n      await processFieldExtensions({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  }\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      let parsedTypes\n      const createdFrom = `sdl`\n      try {\n        parsedTypes = parseTypeDefs({\n          typeDefs: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          schemaComposer,\n          parentSpan,\n        })\n      } catch (error) {\n        reportParsingError(error)\n        return\n      }\n      parsedTypes.forEach(type => {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      })\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n\n      if (type) {\n        const typeName = type.getTypeName()\n        const createdFrom = `typeBuilder`\n        checkIsAllowedTypeName(typeName)\n        if (schemaComposer.has(typeName)) {\n          const typeComposer = schemaComposer.get(typeName)\n          mergeTypes({\n            schemaComposer,\n            typeComposer,\n            type,\n            plugin,\n            createdFrom,\n            parentSpan,\n          })\n        } else {\n          processAddedType({\n            schemaComposer,\n            type,\n            parentSpan,\n            createdFrom,\n            plugin,\n          })\n        }\n      }\n    } else {\n      const typeName = typeOrTypeDef.name\n      const createdFrom = `graphql-js`\n      checkIsAllowedTypeName(typeName)\n      if (schemaComposer.has(typeName)) {\n        const typeComposer = schemaComposer.get(typeName)\n        mergeTypes({\n          schemaComposer,\n          typeComposer,\n          type: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          parentSpan,\n        })\n      } else {\n        processAddedType({\n          schemaComposer,\n          type: typeOrTypeDef,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      }\n    }\n  })\n}\n\nconst mergeTypes = ({\n  schemaComposer,\n  typeComposer,\n  type,\n  plugin,\n  createdFrom,\n  parentSpan,\n}) => {\n  // Only allow user or plugin owning the type to extend already existing type.\n  const typeOwner = typeComposer.getExtension(`plugin`)\n  if (\n    !plugin ||\n    plugin.name === `default-site-plugin` ||\n    plugin.name === typeOwner\n  ) {\n    typeComposer.merge(type)\n    if (isNamedTypeComposer(type)) {\n      typeComposer.extendExtensions(type.getExtensions())\n    }\n    addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n    return true\n  } else {\n    report.warn(\n      `Plugin \\`${plugin.name}\\` tried to define the GraphQL type ` +\n        `\\`${typeComposer.getTypeName()}\\`, which has already been defined ` +\n        `by the plugin \\`${typeOwner}\\`.`\n    )\n    return false\n  }\n}\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.addAsComposer(type)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return typeComposer\n}\n\nconst addExtensions = ({\n  schemaComposer,\n  typeComposer,\n  plugin,\n  createdFrom,\n}) => {\n  typeComposer.setExtension(`createdFrom`, createdFrom)\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)\n\n  if (createdFrom === `sdl`) {\n    const directives = typeComposer.getDirectives()\n    directives.forEach(({ name, args }) => {\n      switch (name) {\n        case `infer`:\n        case `dontInfer`:\n          typeComposer.setExtension(`infer`, name === `infer`)\n          if (args.noDefaultResolvers != null) {\n            typeComposer.setExtension(\n              `addDefaultResolvers`,\n              !args.noDefaultResolvers\n            )\n          }\n          break\n        case `nodeInterface`:\n          if (typeComposer instanceof InterfaceTypeComposer) {\n            if (\n              !typeComposer.hasField(`id`) ||\n              typeComposer.getFieldType(`id`).toString() !== `ID!`\n            ) {\n              report.panic(\n                `Interfaces with the \\`nodeInterface\\` extension must have a field ` +\n                  `\\`id\\` of type \\`ID!\\`. Check the type definition of ` +\n                  `\\`${typeComposer.getTypeName()}\\`.`\n              )\n            }\n            typeComposer.setExtension(`nodeInterface`, true)\n          }\n          break\n        default:\n      }\n    })\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom)\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null\n      )\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName)\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args)\n        })\n      }\n\n      // Validate field extension args. `graphql-compose` already checks the\n      // type of directive args in `parseDirectives`, but we want to check\n      // extensions provided with type builders as well. Also, we warn if an\n      // extension option was provided which does not exist in the field\n      // extension definition.\n      const fieldExtensions = typeComposer.getFieldExtensions(fieldName)\n      const typeName = typeComposer.getTypeName()\n      Object.keys(fieldExtensions)\n        .filter(name => !internalExtensionNames.includes(name))\n        .forEach(name => {\n          const args = fieldExtensions[name]\n          try {\n            const definition = schemaComposer.getDirective(name)\n\n            // Handle `defaultValue` when not provided as directive\n            definition.args.forEach(({ name, defaultValue }) => {\n              if (args[name] === undefined && defaultValue !== undefined) {\n                args[name] = defaultValue\n              }\n            })\n\n            Object.keys(args).forEach(arg => {\n              const argumentDef = definition.args.find(\n                ({ name }) => name === arg\n              )\n              if (!argumentDef) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has invalid argument \\`${arg}\\`.`\n                )\n                return\n              }\n              const value = args[arg]\n              try {\n                validate(argumentDef.type, value)\n              } catch (error) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has argument \\`${arg}\\` with invalid value \"${value}\". ` +\n                    error.message\n                )\n              }\n            })\n          } catch (error) {\n            report.error(\n              `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                `is not available.`\n            )\n          }\n        })\n    })\n  }\n\n  if (typeComposer.hasExtension(`addDefaultResolvers`)) {\n    report.warn(\n      `Deprecation warning - \"noDefaultResolvers\" is deprecated. In Gatsby 3, ` +\n        `defined fields won't get resolvers, unless explicitly added with a ` +\n        `directive/extension.`\n    )\n  }\n\n  return typeComposer\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      return ObjectTypeComposer.createTemp(\n        {\n          ...type.config,\n          interfaces: () => {\n            if (type.config.interfaces) {\n              return type.config.interfaces.map(iface => {\n                if (typeof iface === `string`) {\n                  return schemaComposer.getIFTC(iface).getType()\n                } else {\n                  return iface\n                }\n              })\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      return InputTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      return UnionTypeComposer.createTemp(\n        {\n          ...type.config,\n          types: () => {\n            if (type.config.types) {\n              return type.config.types.map(typeName =>\n                schemaComposer.getOTC(typeName).getType()\n              )\n            } else {\n              return []\n            }\n          },\n        },\n        schemaComposer\n      )\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      return InterfaceTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.ENUM: {\n      return EnumTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    case GatsbyGraphQLTypeKind.SCALAR: {\n      return ScalarTypeComposer.createTemp(type.config, schemaComposer)\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      return null\n    }\n  }\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({\n  schemaComposer,\n  nodeStore,\n  parentSpan,\n}) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            nodes: nodeStore.getNodesByType(typeName),\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.createTempTC(schemaQueryType)\n    processThirdPartyTypeFields({ typeComposer: queryTC, schemaQueryType })\n    schemaComposer.Query.addFields(queryTC.getFields())\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeComposer = schemaComposer.createTC(type)\n        if (\n          typeComposer instanceof ObjectTypeComposer ||\n          typeComposer instanceof InterfaceTypeComposer\n        ) {\n          processThirdPartyTypeFields({ typeComposer, schemaQueryType })\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`)\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst processThirdPartyTypeFields = ({ typeComposer, schemaQueryType }) => {\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const field = typeComposer.getField(fieldName)\n    const fieldType = field.type.toString()\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      })\n    }\n  })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = resolvers => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            let fieldTypeName\n            if (fieldConfig.type) {\n              fieldTypeName = Array.isArray(fieldConfig.type)\n                ? stringifyArray(fieldConfig.type)\n                : fieldConfig.type.toString()\n            }\n\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver: originalResolver || defaultFieldResolver,\n                  })\n              }\n              tc.extendField(fieldName, newConfig)\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({ [fieldName]: fieldConfig })\n          }\n        })\n      } else {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    schema: intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan,\n  })\n}\n\nconst addConvenienceChildrenFields = ({\n  schemaComposer,\n  typeComposer,\n  nodeStore,\n}) => {\n  const nodes = nodeStore.getNodesByType(typeComposer.getTypeName())\n\n  const childNodesByType = groupChildNodesByType({ nodeStore, nodes })\n\n  Object.keys(childNodesByType).forEach(typeName => {\n    const typeChildren = childNodesByType[typeName]\n    const maxChildCount = _.maxBy(\n      _.values(_.groupBy(typeChildren, c => c.parent)),\n      g => g.length\n    ).length\n\n    if (maxChildCount > 1) {\n      typeComposer.addFields(createChildrenField(typeName))\n    } else {\n      typeComposer.addFields(createChildField(typeName))\n    }\n  })\n}\n\nfunction createChildrenField(typeName) {\n  return {\n    [_.camelCase(`children ${typeName}`)]: {\n      type: () => [typeName],\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nfunction createChildField(typeName) {\n  return {\n    [_.camelCase(`child ${typeName}`)]: {\n      type: () => typeName,\n      async resolve(source, args, context) {\n        const { path } = context\n        const result = await context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nfunction groupChildNodesByType({ nodeStore, nodes }) {\n  return _(nodes)\n    .flatMap(node => (node.children || []).map(nodeStore.getNode))\n    .groupBy(node => (node.internal ? node.internal.type : undefined))\n    .value()\n}\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  // TODO: We should have an abstraction for keeping and clearing\n  // related TypeComposers and InputTypeComposers.\n  // Also see the comment on the skipped test in `rebuild-schema`.\n  typeComposer.removeInputTypeComposer()\n\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = _.camelCase(typeName)\n  const queryNamePlural = _.camelCase(`all ${typeName}`)\n\n  schemaComposer.Query.addFields({\n    [queryName]: {\n      type: typeComposer,\n      args: {\n        ...filterInputTC.getFields(),\n      },\n      resolve: findOne(typeName),\n    },\n    [queryNamePlural]: {\n      type: paginationTC,\n      args: {\n        filter: filterInputTC,\n        sort: sortInputTC,\n        skip: `Int`,\n        limit: `Int`,\n      },\n      resolve: findManyPaginated(typeName),\n    },\n  })\n}\n\nconst parseTypes = ({\n  doc,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const types = []\n  doc.definitions.forEach(def => {\n    const name = def.name.value\n    checkIsAllowedTypeName(name)\n\n    if (schemaComposer.has(name)) {\n      // We don't check if ast.kind matches composer type, but rely\n      // that this will throw when something is wrong and get\n      // reported by `reportParsingError`.\n\n      // Keep the original type composer around\n      const typeComposer = schemaComposer.get(name)\n\n      // After this, the parsed type composer will be registered as the composer\n      // handling the type name\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n\n      // Merge the parsed type with the original\n      mergeTypes({\n        schemaComposer,\n        typeComposer,\n        type: parsedType,\n        plugin,\n        createdFrom,\n        parentSpan,\n      })\n\n      // Set the original type composer (with the merged fields added)\n      // as the correct composer for the type name\n      schemaComposer.typeMapper.set(typeComposer.getTypeName(), typeComposer)\n    } else {\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n      types.push(parsedType)\n    }\n  })\n  return types\n}\n\nconst parseTypeDefs = ({\n  typeDefs,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const doc = parse(typeDefs)\n  return parseTypes({ doc, plugin, createdFrom, schemaComposer, parentSpan })\n}\n\nconst reportParsingError = error => {\n  const { message, source, locations } = error\n\n  if (source && locations && locations.length) {\n    const { codeFrameColumns } = require(`@babel/code-frame`)\n\n    const frame = codeFrameColumns(\n      source.body,\n      { start: locations[0] },\n      { linesAbove: 5, linesBelow: 5 }\n    )\n    report.panic(\n      `Encountered an error parsing the provided GraphQL type definitions:\\n` +\n        message +\n        `\\n\\n` +\n        frame +\n        `\\n`\n    )\n  } else {\n    throw error\n  }\n}\n\nconst stringifyArray = arr =>\n  `[${arr.map(item =>\n    Array.isArray(item) ? stringifyArray(item) : item.toString()\n  )}]`\n\n// TODO: Import this directly from graphql-compose once we update to v7\nconst isNamedTypeComposer = type =>\n  type instanceof ObjectTypeComposer ||\n  type instanceof InputTypeComposer ||\n  type instanceof ScalarTypeComposer ||\n  type instanceof EnumTypeComposer ||\n  type instanceof InterfaceTypeComposer ||\n  type instanceof UnionTypeComposer\n\nconst validate = (type, value) => {\n  if (type instanceof GraphQLNonNull) {\n    if (value == null) {\n      throw new Error(`Expected non-null field value.`)\n    }\n    return validate(type.ofType, value)\n  } else if (type instanceof GraphQLList) {\n    if (!Array.isArray(value)) {\n      throw new Error(`Expected array field value.`)\n    }\n    return value.map(v => validate(type.ofType, v))\n  } else {\n    return type.parseValue(value)\n  }\n}\n\nconst checkQueryableInterfaces = ({ schemaComposer }) => {\n  const queryableInterfaces = new Set()\n  schemaComposer.forEach(type => {\n    if (\n      type instanceof InterfaceTypeComposer &&\n      type.getExtension(`nodeInterface`)\n    ) {\n      queryableInterfaces.add(type.getTypeName())\n    }\n  })\n  const incorrectTypes = []\n  schemaComposer.forEach(type => {\n    if (type instanceof ObjectTypeComposer) {\n      const interfaces = type.getInterfaces()\n      if (\n        interfaces.some(iface => queryableInterfaces.has(iface.name)) &&\n        !type.hasInterface(`Node`)\n      ) {\n        incorrectTypes.push(type.getTypeName())\n      }\n    }\n  })\n  if (incorrectTypes.length) {\n    report.panic(\n      `Interfaces with the \\`nodeInterface\\` extension must only be ` +\n        `implemented by types which also implement the \\`Node\\` ` +\n        `interface. Check the type definition of ` +\n        `${incorrectTypes.map(t => `\\`${t}\\``).join(`, `)}.`\n    )\n  }\n}\n"],"file":"schema.js"}