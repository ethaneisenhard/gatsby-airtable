{"version":3,"sources":["../../../src/schema/extensions/index.js"],"names":["GraphQLBoolean","GraphQLNonNull","GraphQLDirective","GraphQLString","DirectiveLocation","defaultFieldResolver","require","link","fileByPath","getDateResolver","typeExtensions","infer","description","args","noDefaultResolvers","type","deprecationReason","dontInfer","nodeInterface","locations","INTERFACE","builtInFieldExtensions","dateformat","name","formatString","locale","extend","fieldConfig","by","defaultValue","from","originalResolver","resolve","fileByRelativePath","proxy","source","context","info","fieldName","internalExtensionNames","reservedExtensionNames","Object","keys","toDirectives","schemaComposer","extensions","defaultLocations","map","extension","normalizedArgs","typeMapper","convertArgConfigMap","addDirectives","fieldExtensions","fieldDirectives","FIELD_DEFINITION","forEach","directive","addDirective","typeDirectives","OBJECT","processFieldExtensions","typeComposer","parentSpan","getFieldNames","getFieldExtensions","filter","includes","sort","a","prevFieldConfig","getFieldConfig","extendField","module","exports"],"mappings":"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","sourcesContent":["// @flow\nconst {\n  GraphQLBoolean,\n  GraphQLNonNull,\n  GraphQLDirective,\n  GraphQLString,\n  DirectiveLocation,\n  defaultFieldResolver,\n} = require(`graphql`)\n\nconst { link, fileByPath } = require(`../resolvers`)\nconst { getDateResolver } = require(`../types/date`)\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfig } from \"graphql\"\nimport type { ComposeFieldConfig } from \"graphql-compose\"\n\nexport interface GraphQLFieldExtensionDefinition {\n  name: string;\n  args?: GraphQLFieldConfigArgumentMap;\n  extend(\n    args: GraphQLFieldConfigArgumentMap,\n    prevFieldConfig: GraphQLFieldConfig\n  ): $Shape<ComposeFieldConfig>;\n}\n\nconst typeExtensions = {\n  infer: {\n    description: `Infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: GraphQLBoolean,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  dontInfer: {\n    description: `Do not infer field types from field values.`,\n    args: {\n      noDefaultResolvers: {\n        type: GraphQLBoolean,\n        description: `Don't add default resolvers to defined fields.`,\n        deprecationReason: `noDefaultResolvers is deprecated, annotate individual fields.`,\n      },\n    },\n  },\n  nodeInterface: {\n    description:\n      `Adds root query fields for an interface. All implementing types ` +\n      `must also implement the Node interface.`,\n    locations: [DirectiveLocation.INTERFACE],\n  },\n}\n\nconst builtInFieldExtensions = {\n  dateformat: {\n    name: `dateformat`,\n    description: `Add date formating options.`,\n    args: {\n      formatString: { type: GraphQLString },\n      locale: { type: GraphQLString },\n    },\n    extend(args, fieldConfig) {\n      return getDateResolver(args, fieldConfig)\n    },\n  },\n\n  link: {\n    name: `link`,\n    description: `Link to node by foreign-key relation.`,\n    args: {\n      by: {\n        type: new GraphQLNonNull(GraphQLString),\n        defaultValue: `id`,\n      },\n      from: {\n        type: GraphQLString,\n      },\n    },\n    extend(args, fieldConfig) {\n      const originalResolver = fieldConfig.resolve || defaultFieldResolver\n      return {\n        resolve: link(args, originalResolver),\n      }\n    },\n  },\n\n  fileByRelativePath: {\n    name: `fileByRelativePath`,\n    description: `Link to File node by relative path.`,\n    args: {\n      from: {\n        type: GraphQLString,\n      },\n    },\n    extend(args, fieldConfig) {\n      const originalResolver = fieldConfig.resolve || defaultFieldResolver\n      return {\n        resolve: fileByPath(args, originalResolver),\n      }\n    },\n  },\n\n  proxy: {\n    name: `proxy`,\n    description: `Proxy resolver from another field.`,\n    args: {\n      from: {\n        type: new GraphQLNonNull(GraphQLString),\n      },\n    },\n    extend({ from }, fieldConfig) {\n      const originalResolver = fieldConfig.resolve || defaultFieldResolver\n      return {\n        resolve(source, args, context, info) {\n          return originalResolver(source, args, context, {\n            ...info,\n            fieldName: from,\n          })\n        },\n      }\n    },\n  },\n}\n\n// Reserved for internal use\nconst internalExtensionNames = [\n  `createdFrom`,\n  `default`,\n  `directives`,\n  `infer`,\n  `plugin`,\n]\nconst reservedExtensionNames = [\n  ...internalExtensionNames,\n  ...Object.keys(builtInFieldExtensions),\n]\n\nconst toDirectives = ({\n  schemaComposer,\n  extensions,\n  locations: defaultLocations,\n}) =>\n  Object.keys(extensions).map(name => {\n    const extension = extensions[name]\n    const { args, description, locations } = extension\n    // Support the `graphql-compose` style of directly providing the field type as string\n    const normalizedArgs = schemaComposer.typeMapper.convertArgConfigMap(args)\n    return new GraphQLDirective({\n      name,\n      args: normalizedArgs,\n      description,\n      locations: locations || defaultLocations,\n    })\n  })\n\nconst addDirectives = ({ schemaComposer, fieldExtensions = {} }) => {\n  const fieldDirectives = toDirectives({\n    schemaComposer,\n    extensions: fieldExtensions,\n    locations: [DirectiveLocation.FIELD_DEFINITION],\n  })\n  fieldDirectives.forEach(directive => schemaComposer.addDirective(directive))\n  const typeDirectives = toDirectives({\n    schemaComposer,\n    extensions: typeExtensions,\n    locations: [DirectiveLocation.OBJECT],\n  })\n  typeDirectives.forEach(directive => schemaComposer.addDirective(directive))\n}\n\nconst processFieldExtensions = ({\n  fieldExtensions = {},\n  schemaComposer,\n  typeComposer,\n  parentSpan,\n}) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    Object.keys(extensions)\n      .filter(name => !internalExtensionNames.includes(name))\n      .sort(a => a === `proxy`) // Ensure `proxy` is run last\n      .forEach(name => {\n        const { extend } = fieldExtensions[name] || {}\n        if (typeof extend === `function`) {\n          // Always get fresh field config as it will have been changed\n          // by previous field extension\n          const prevFieldConfig = typeComposer.getFieldConfig(fieldName)\n          typeComposer.extendField(\n            fieldName,\n            extend(extensions[name], prevFieldConfig)\n          )\n        }\n      })\n  })\n}\n\nmodule.exports = {\n  addDirectives,\n  builtInFieldExtensions,\n  internalExtensionNames,\n  processFieldExtensions,\n  reservedExtensionNames,\n}\n"],"file":"index.js"}